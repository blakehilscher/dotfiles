#!/usr/bin/env ruby
# encoding: UTF-8

require 'active_support/all'
require 'rest_client'
require 'pry'


class PushBullet
  
  API_HOST = 'https://api.pushbullet.com/api'
  
  attr_accessor :options
  
  def initialize(*args)
    self.options = args.extract_options!
  end
  
  def push(type, id, title, body=nil)
    # format
    data = push_format( type, id, title, body )
    # send
    resources.pushes.post( data )
  end
  
  def push_format(type, id, title, body=nil)
    body = title if body.nil?
    case type
    when 'note'     then { device_iden: id, title: title, body: body, type: type }
    when 'link'     then { device_iden: id, title: title, url: body, type: type }
    when 'address'  then { device_iden: id, name: title, address: body, type: type }
    end
  end
  
  def devices
    @devices ||= JSON.parse(resources.devices.get)['devices'].collect{|d| OpenStruct.new(d) }
  end
  
  def resources
    OpenStruct.new({
      devices:  resource('devices'),
      pushes:   resource('pushes'),
    })
  end
  
  def resource(name)
    RestClient::Resource.new( File.join(API_HOST, name), options.slice(:user, :password) )
  end
  
end

pb = PushBullet.new( user: ENV['PUSHBULLET_API_KEY'], password: ENV['PUSHBULLET_API_SECRET'] )

type, title, body = ARGV[0], ARGV[1], ARGV[2]

if type == 'devices'
  puts pb.devices
  
else
  
  if title.blank? && type.present?
    title = type
    type = 'note'
  end

  pb.push(type, ENV['PUSHBULLET_DEVICE_ID'], title, body) if title.present?
end
